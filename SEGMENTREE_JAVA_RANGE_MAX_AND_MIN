 class SegmentTree {
    private int[] arr;
    private int[] minTree;
    private int[] maxTree;
    private int n;

    public SegmentTree(int[] arr) {
        this.arr = arr;
        this.n = arr.length;
        this.minTree = new int[4 * n];
        this.maxTree = new int[4 * n];
        build(0, 0, n - 1);
    }

    private void build(int node, int start, int end) {
        if (start == end) {
            minTree[node] = arr[start];
            maxTree[node] = arr[start];
        } else {
            int mid = (start + end) / 2;
            int leftChild = 2 * node + 1;
            int rightChild = 2 * node + 2;

            build(leftChild, start, mid);
            build(rightChild, mid + 1, end);

            minTree[node] = Math.min(minTree[leftChild], minTree[rightChild]);
            maxTree[node] = Math.max(maxTree[leftChild], maxTree[rightChild]);
        }
    }

    public void update(int index, int value) {
        update(0, 0, n - 1, index, value);
    }

    private void update(int node, int start, int end, int index, int value) {
        if (start == end) {
            arr[index] = value;
            minTree[node] = value;
            maxTree[node] = value;
        } else {
            int mid = (start + end) / 2;
            int leftChild = 2 * node + 1;
            int rightChild = 2 * node + 2;

            if (index <= mid) {
                update(leftChild, start, mid, index, value);
            } else {
                update(rightChild, mid + 1, end, index, value);
            }

            minTree[node] = Math.min(minTree[leftChild], minTree[rightChild]);
            maxTree[node] = Math.max(maxTree[leftChild], maxTree[rightChild]);
        }
    }

    public int rangeMinQuery(int left, int right) {
        return rangeMinQuery(0, 0, n - 1, left, right);
    }

    private int rangeMinQuery(int node, int start, int end, int left, int right) {
        if (right < start || left > end) {
            return Integer.MAX_VALUE;
        }

        if (left <= start && end <= right) {
            return minTree[node];
        }

        int mid = (start + end) / 2;
        int leftMin = rangeMinQuery(2 * node + 1, start, mid, left, right);
        int rightMin = rangeMinQuery(2 * node + 2, mid + 1, end, left, right);

        return Math.min(leftMin, rightMin);
    }

    public int rangeMaxQuery(int left, int right) {
        return rangeMaxQuery(0, 0, n - 1, left, right);
    }

    private int rangeMaxQuery(int node, int start, int end, int left, int right) {
        if (right < start || left > end) {
            return Integer.MIN_VALUE;
        }

        if (left <= start && end <= right) {
            return maxTree[node];
        }

        int mid = (start + end) / 2;
        int leftMax = rangeMaxQuery(2 * node + 1, start, mid, left, right);
        int rightMax = rangeMaxQuery(2 * node + 2, mid + 1, end, left, right);

        return Math.max(leftMax, rightMax);
    }

    public static void main(String[] args) {
        int[] arr = {1, 3, 2, 7, 9, 11};
        SegmentTree segmentTree = new SegmentTree(arr);

        System.out.println("Range Min Query(1, 4): " + segmentTree.rangeMinQuery(1, 4)); // Output: 2
        System.out.println("Range Max Query(1, 4): " + segmentTree.rangeMaxQuery(1, 4)); // Output: 9

        segmentTree.update(2, 6);
        System.out.println("After update: ");
        System.out.println("Range Min Query(1, 4): " + segmentTree.rangeMinQuery(1, 4)); // Output: 3
        System.out.println("Range Max Query(1, 4): " + segmentTree.rangeMaxQuery(1, 4)); // Output: 9
    }
}
