
static HashSet<Integer> g[];
static int parent[][];


    // ----------------------------------------------

    public static void main(String[] args) {

        int T = 1;




//        T = s.nextInt();



//        long startTime = System.nanoTime();


        // starting of while loop
        outer:while (T > 0) {
            T--;


            int n = s.nextInt();

            parent = new int[n+1][25];
            g = new HashSet[n+1];

            for(int i = 0 ; i <=n; i++)g[i]=new HashSet<>();

            for(int i = 0 ; i < n-1; i++){
                int u = s.nextInt();
                int v = s.nextInt();
                g[u].add(v);
                g[v].add(u);
            }

             for(int row[] : parent)Arrays.fill(row, -1);

dfs(1 , 0   );



                int k = s.nextInt();
                int u = s.nextInt();
                while(k > 0 && u != -1){

                    int x = log2(k , 0);
                 
                    u = parent[u][x];

                    k = k - (1<<x);

                }




             // end of while loop
        }



//         Stop measuring execution time
//        long endTime = System.nanoTime();

        // Calculate the execution time in milliseconds
//        long executionTime
//                = (endTime - startTime) / 1000000;
//
//        System.out.println(executionTime + " executiontime");
        // main args static
out.flush();
    }




    //----------------------------------question to solve-------------------
// question to solve


    private static void dfs(int u, int par) {

        parent[u][0] = par;

        for(int j =1; j <= 20; j++){

            if(parent[u][j-1] != -1 ){
                parent[u][j] = parent[parent[u][j-1]][j-1];
            }else{
                parent[u][j]=-1;
            }


        }

        for(int v : g[u]){

            if(v != par){

                dfs(v , u);
            }


        }


        // end of dfs
    }

