import java.util.*;

public class GFG {

    static final int MOD = 1000000007;

    // Function to multiply two 2x2 matrices
    public static void multiply(long[][] A, long[][] B) {
        // Matrix to store the result
        long[][] C = new long[2][2];

        // Matrix multiplication
        C[0][0] = (A[0][0] * B[0][0] + A[0][1] * B[1][0]) % MOD;
        C[0][1] = (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % MOD;
        C[1][0] = (A[1][0] * B[0][0] + A[1][1] * B[1][0]) % MOD;
        C[1][1] = (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % MOD;

        // Copy the result back to the first matrix
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                A[i][j] = C[i][j];
            }
        }
    }

    // Function to find (Matrix M ^ expo)
    public static long[][] power(long[][] M, int expo) {
        // Initialize result with identity matrix
        long[][] ans = { { 1, 0 }, { 0, 1 } };

        // Fast exponentiation
        while (expo > 0) {
            if ((expo & 1) != 0) {
                multiply(ans, M);
            }
            multiply(M, M);
            expo >>= 1;
        }

        return ans;
    }

    // Function to find the nth Fibonacci number
    public static int nthFibonacci(int n) {
        // Base cases
        if (n == 0) return 0;
        if (n == 1) return 1;

        long[][] M = { { 1, 1 }, { 1, 0 } };

        // Multiply matrix M (n - 1) times
        long[][] res = power(M, n - 1);

        // The nth Fibonacci number is in res[0][0]
        return (int)(res[0][0] % MOD);
    }

    public static void main(String[] args) {
        // Sample input
        int n = 10;

        // Print nth Fibonacci number
        System.out.println(nthFibonacci(n));  // Output: 55
    }
}
