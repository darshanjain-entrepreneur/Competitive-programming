import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.text.CollationElementIterator;
import java.util.*;
import java.util.StringTokenizer;

public class Main {


    static int M = (int) (1e9) + 7;

    public static void main(String[] args) {

        FastReader s = new FastReader();
        PrintWriter out = new PrintWriter(System.out);

        int t = s.nextInt();

        while(t > 0) {
            t--;

            int n = s.nextInt();
            int c = s.nextInt();

            int q = s.nextInt();

            String st = s.next();

          long len[][] = new long[c][2];
          long query[][] = new long[c][2];
          long brr[] = new long[q];

          long cur = n;
          for(int i = 0; i < c; i++){

              long a = s.nextLong();
              long b = s.nextLong();

              query[i][0] = a;
              query[i][1] = b;

              long qlen = b - a + 1;

              len[i][0] = cur+1;
              len[i][1] =cur + qlen;
              cur = len[i][1];

          }

          for(int i = 0; i < q; i++)brr[i] = s.nextLong();


          for(int i = 0; i < q; i++){

              long idx = brr[i];

              for(int j = c-1; j >= 0; j--){

                  if(idx >= len[j][0] && idx <= len[j][1]){

                      long gap = idx - len[j][0];
                      idx = query[j][0] + gap;
                  }


              }

              out.println(st.charAt((int)idx -1));

          }

out.flush();


            // end of while loop
        }
        //end
    }


    // function for fast sorting
    public static void sort(int arr[]){
        ArrayList<Integer> ll = new ArrayList<>();
        for(int i = 0; i < arr.length; i++){
            ll.add(arr[i]);
        }
        Collections.sort(ll);
        for(int i = 0; i < ll.size(); i++){
            arr[i] = ll.get(i);
        }
    }


// count inversions
static int count = 0;
    static long countInversions(long arr[], int N)
    {
        mergeSort(arr,0,N-1);
        long temp = count;
        count = 0;
        return  temp;
    }
    static long[] mergeSort(long[] arr, int l, int h)
    {
        if(l==h)
        {
            long ans[] = new long[1];
            ans[0] = arr[l];
            return ans;
        }
        long[] left =  mergeSort(arr,l,(l+h)/2);
        long[] right = mergeSort(arr,((l+h)/2)+1,h);

        return merge(left,right);
    }
    static long[] merge(long[] l, long r[])
    {
        int l1 = l.length, l2 = r.length;
        long[] ans = new long[l1+l2];
        int i=0,j=0,ind=0;

        while(i<l1||j<l2)
        {
            if(i==l1)
                ans[ind++] = r[j++];
            else if(j==l2)
                ans[ind++] = l[i++];
            else if(l[i]<r[j])
                ans[ind++] = l[i++];
            else
            {
                ans[ind++] = r[j++];
                count += (l1-i);
            }
        }
        return ans;
    }






    // input method
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader()
        {
            br = new BufferedReader(
                    new InputStreamReader(System.in));
        }

        String next()
        {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                }
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() { return Integer.parseInt(next()); }

        long nextLong() { return Long.parseLong(next()); }

        double nextDouble()
        {
            return Double.parseDouble(next());
        }

        String nextLine()
        {
            String str = "";
            try {
                if(st.hasMoreTokens()){
                    str = st.nextToken("\n");
                }
                else{
                    str = br.readLine();
                }
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }


}


// b inverse modulo M = b ki power M - 2;
