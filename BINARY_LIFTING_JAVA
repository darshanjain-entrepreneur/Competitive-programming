import java.util.*;
import java.io.*;

public class BinaryLifting {
    private ArrayList<Integer>[] tree;
    private int[][] up;
    private final int N;
    private final int L; // L is the maximum number of levels in binary lifting, log2(N) roughly

    public BinaryLifting(int size) {
        N = size;
        L = (int) Math.ceil(Math.log(N) / Math.log(2));
        tree = new ArrayList[N + 1];
        up = new int[N + 1][L + 1];
        for (int i = 0; i <= N; i++) {
            tree[i] = new ArrayList<>();
            Arrays.fill(up[i], -1);
        }
    }

    public void addEdge(int a, int b) {
        tree[a].add(b);
        tree[b].add(a);
    }

    public void binaryLifting(int src, int par) {
        up[src][0] = par;
        for (int i = 1; i <= L; i++) {
            if (up[src][i - 1] != -1)
                up[src][i] = up[up[src][i - 1]][i - 1];
            else
                up[src][i] = -1;
        }

        for (int child : tree[src]) {
            if (child != par)
                binaryLifting(child, src);
        }
    }

    public int ansQuery(int node, int jumpRequired) {
        if (node == -1 || jumpRequired == 0)
            return node;

        for (int i = L; i >= 0; i--) {
            if (jumpRequired >= (1 << i)) {
                return ansQuery(up[node][i], jumpRequired - (1 << i));
            }
        }
        return node; // Should not reach here
    }

    public static class Main {
        public static void main(String[] args) throws IOException {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            StringTokenizer st;

            int n, q;
            st = new StringTokenizer(br.readLine());
            n = Integer.parseInt(st.nextToken());
            q = Integer.parseInt(st.nextToken());

            BinaryLifting bl = new BinaryLifting(n);

            for (int i = 2; i <= n; i++) {
                st = new StringTokenizer(br.readLine());
                int x = Integer.parseInt(st.nextToken());
                bl.addEdge(x, i);
            }

            bl.binaryLifting(1, -1);

            while (q-- > 0) {
                st = new StringTokenizer(br.readLine());
                int node = Integer.parseInt(st.nextToken());
                int k = Integer.parseInt(st.nextToken());
                System.out.println(bl.ansQuery(node, k));
            }
        }
    }
}
