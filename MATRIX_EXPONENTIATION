public class MatrixExponentiation {

    static final int MOD = 1000000007;

    // Function to multiply two matrices
    public static long[][] multiply(long[][] A, long[][] B) {
        int n = A.length;
        long[][] result = new long[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                result[i][j] = 0;
                for (int k = 0; k < n; k++) {
                    result[i][j] = (result[i][j] + (A[i][k] * B[k][j]) % MOD) % MOD;
                }
            }
        }

        return result;
    }

    // Function to perform matrix exponentiation
    public static long[][] matrixPower(long[][] base, int exp) {
        int n = base.length;
        long[][] result = new long[n][n];

        // Initialize result as identity matrix
        for (int i = 0; i < n; i++) {
            result[i][i] = 1;
        }

        while (exp > 0) {
            if ((exp & 1) != 0) {
                result = multiply(result, base);
            }
            base = multiply(base, base);
            exp >>= 1;
        }

        return result;
    }

    // Example: Function to find the nth Fibonacci number
    public static long nthFibonacci(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;

        long[][] baseMatrix = { 
            { 1, 1 }, 
            { 1, 0 } 
        };

        long[][] result = matrixPower(baseMatrix, n - 1);

        return result[0][0];
    }

    public static void main(String[] args) {
        // Example usage: Find the 10th Fibonacci number
        int n = 10;
        System.out.println(nthFibonacci(n));  // Output: 55
    }
}
