static class SuffixArray {
        private String text;
        private int[] suffixArr;
        private int[] lcpArr;

        // Suffix class to store information of a suffix
        private static class Suffix implements Comparable<Suffix> {
            int index;  // Stores original index
            int rank0;  // Stores rank and next rank pair
            int rank1;

            public Suffix(int index, int rank0, int rank1) {
                this.index = index;
                this.rank0 = rank0;
                this.rank1 = rank1;
            }

            // Compares two suffixes
            @Override
            public int compareTo(Suffix s) {
                if (this.rank0 == s.rank0) {
                    return Integer.compare(this.rank1, s.rank1);
                } else {
                    return Integer.compare(this.rank0, s.rank0);
                }
            }
        }

        // Constructor
        public SuffixArray(String text) {
            this.text = text + "$";  // Adding the dollar sign at the end
            this.suffixArr = buildSuffixArray();
            this.lcpArr = buildLCPArray();
        }

        // Constructs the suffix array for a given text
        private int[] buildSuffixArray() {
            int n = text.length();
            Suffix[] suffixes = new Suffix[n];

            // Initialize suffixes with rank and next rank
            for (int i = 0; i < n; i++) {
                suffixes[i] = new Suffix(i, text.charAt(i) - 'a', (i + 1 < n) ? (text.charAt(i + 1) - 'a') : -1);
            }

            // Sort the suffixes based on first 2 characters
            Arrays.sort(suffixes);

            int[] indices = new int[n];  // This will store the index in suffixes[]

            // Loop to sort the suffixes based on first 4, 8, 16, ... characters
            for (int length = 4; length < 2 * n; length <<= 1) {
                // Assigning rank and index values to suffixes
                int rank = 0;
                int previousRank0 = suffixes[0].rank0;
                suffixes[0].rank0 = rank;
                indices[suffixes[0].index] = 0;

                for (int i = 1; i < n; i++) {
                    if (suffixes[i].rank0 == previousRank0 && suffixes[i].rank1 == suffixes[i - 1].rank1) {
                        previousRank0 = suffixes[i].rank0;
                        suffixes[i].rank0 = rank;
                    } else {
                        previousRank0 = suffixes[i].rank0;
                        suffixes[i].rank0 = ++rank;
                    }
                    indices[suffixes[i].index] = i;
                }

                // Assign next rank to every suffix
                for (int i = 0; i < n; i++) {
                    int nextIndex = suffixes[i].index + length / 2;
                    suffixes[i].rank1 = (nextIndex < n) ? suffixes[indices[nextIndex]].rank0 : -1;
                }

                // Sort the suffixes according to first length characters
                Arrays.sort(suffixes);
            }

            // Extract the index of the suffixes to get the suffix array
            int[] suffixArr = new int[n];
            for (int i = 0; i < n; i++) {
                suffixArr[i] = suffixes[i].index;
            }

            return suffixArr;
        }

        // Constructs the LCP array for the suffix array
        private int[] buildLCPArray() {
            int n = text.length();
            int[] rank = new int[n];
            int[] lcp = new int[n];
            int h = 0;

            // Create rank array
            for (int i = 0; i < n; i++) {
                rank[suffixArr[i]] = i;
            }

            // Build LCP array using rank array and suffix array
            for (int i = 0; i < n; i++) {
                if (rank[i] > 0) {
                    int j = suffixArr[rank[i] - 1];
                    while (i + h < n && j + h < n && text.charAt(i + h) == text.charAt(j + h)) {
                        h++;
                    }
                    lcp[rank[i]] = h;
                    if (h > 0) {
                        h--;
                    }
                }
            }

            return lcp;
        }

        // Getter for the suffix array
        public int[] getSuffixArray() {
            return suffixArr;
        }

        // Getter for the LCP array
        public int[] getLCPArray() {
            return lcpArr;
        }

        // Utility function to print the suffix array
        public void printSuffixArray() {
            System.out.println("Suffix Array : ");
            for (int value : suffixArr) {
                System.out.print(value + " ");
            }
            System.out.println();
        }

        // Utility function to print the LCP array
        public void printLCPArray() {
            System.out.println("LCP Array : ");
            for (int value : lcpArr) {
                System.out.print(value + " ");
            }
            System.out.println();
        }

//        public static void main(String[] args) {
//            String text = "banana";
//            SuffixArray suffixArray = new SuffixArray(text);
//            suffixArray.printSuffixArray();
//            suffixArray.printLCPArray();
//        }
    }
