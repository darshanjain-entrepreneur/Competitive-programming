static  class LazySegmentTree {
        long[] tree, lazy;
        int n;
        long[] arr;

        public LazySegmentTree(long[] arr) {
            this.n = arr.length;
            this.arr = arr;
            tree = new long[4 * n];
            lazy = new long[4 * n];
            build(0, 0, n - 1);
        }

        private void build(int node, int start, int end) {
            if (start == end) {
                tree[node] = arr[start];
            } else {
                int mid = (start + end) / 2;
                build(2 * node + 1, start, mid);
                build(2 * node + 2, mid + 1, end);
                tree[node] = Math.max(tree[2 * node + 1], tree[2 * node + 2]);
            }
        }

        private void propagate(int node, int start, int end) {
            if (lazy[node] != 0) {
                tree[node] += lazy[node];
                if (start != end) {
                    lazy[2 * node + 1] += lazy[node];
                    lazy[2 * node + 2] += lazy[node];
                }
                lazy[node] = 0;
            }
        }

        public void updateRange(int l ,int r ,  long  val){

            updateRange(0, 0, arr.length - 1, l, r, val);
        }
       private  void updateRange(int node, int start, int end, int l, int r, long val) {
            propagate(node, start, end);
            if (start > end || l > end || r < start)
                return;

            if (l <= start && end <= r) {
                tree[node] += val;
                if (start != end) {
                    lazy[2 * node + 1] += val;
                    lazy[2 * node + 2] += val;
                }
                return;
            }

            int mid = (start + end) / 2;
            updateRange(2 * node + 1, start, mid, l, r, val);
            updateRange(2 * node + 2, mid + 1, end, l, r, val);
            tree[node] = Math.max(tree[2 * node + 1], tree[2 * node + 2]);
        }

        public long queryRange(int l , int r){
            return queryRange(0, 0, arr.length - 1,  l ,r);
        }


        private  long queryRange(int node, int start, int end, int l, int r) {
            propagate(node, start, end);
            if (start > end || l > end || r < start)
                return -(long)(1e13);

            if (l <= start && end <= r)
                return tree[node];

            int mid = (start + end) / 2;
           long  p1 = queryRange(2 * node + 1, start, mid, l, r);
            long  p2 = queryRange(2 * node + 2, mid + 1, end, l, r);
            return Math.max(p1, p2);
        }

//        public static void main(String[] args) {
//            int[] arr = {1, 3, 5, 7, 9};
//            LazySegmentTree st = new LazySegmentTree(arr);
//
//            // Example usage:
//            st.updateRange(0, 0, arr.length - 1, 0, 1, 2); // Add 2 to elements in range [1, 3]
//            System.out.println(st.queryRange(0, 0, arr.length - 1, 0, 1)); // Query for max value at index 2
//        }
    }
