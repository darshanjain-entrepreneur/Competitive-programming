  static   class LowestCommonAncestor {
        private ArrayList<Integer>[] g;
        private int[][] memo;
        private int[] lev;
        private int log;

        public LowestCommonAncestor(int n) {
            g = new ArrayList[n + 1];
            lev = new int[n + 1];
            for (int i = 0; i <= n; i++) {
                g[i] = new ArrayList<>();
            }
            log = (int) Math.ceil(Math.log(n) / Math.log(2));
            memo = new int[n + 1][log + 1];
            for (int i = 0; i <= n; i++) {
                Arrays.fill(memo[i], -1);
            }
        }

        public void addEdge(int u, int v) {
            g[u].add(v);
            g[v].add(u); // Assuming it's an undirected graph
        }

        public void dfs(int u, int p) {
            memo[u][0] = p;
            for (int i = 1; i <= log; i++) {
                memo[u][i] = memo[memo[u][i - 1]][i - 1];
            }
            for (int v : g[u]) {
                if (v != p) {
                    lev[v] = lev[u] + 1;
                    dfs(v, u);
                }
            }
        }

        public int lca(int u, int v) {
            if (lev[u] < lev[v]) {
                int temp = u;
                u = v;
                v = temp;
            }
            for (int i = log; i >= 0; i--) {
                if ((lev[u] - (int) Math.pow(2, i)) >= lev[v]) {
                    u = memo[u][i];
                }
            }
            if (u == v) {
                return u;
            }
            for (int i = log; i >= 0; i--) {
                if (memo[u][i] != memo[v][i]) {
                    u = memo[u][i];
                    v = memo[v][i];
                }
            }
            return memo[u][0];
        }

//        public static void main(String[] args) {
//            int n = 9;
//            cptemplates.LowestCommonAncestor lcaFinder = new cptemplates.LowestCommonAncestor(n);
//
//            lcaFinder.addEdge(1, 2);
//            lcaFinder.addEdge(1, 3);
//            lcaFinder.addEdge(3, 4);
//            lcaFinder.addEdge(3, 5);
//
//
//            lcaFinder.dfs(1, 1);
//
//            System.out.println("The LCA of 6 and 9 is " + lcaFinder.lca(4, 5));
//
//        }
    }
